{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../shared/services/authentication.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction RegisterComponent_em_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"em\");\n    i0.ɵɵtext(1, \"Coloar un correo valido\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_em_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"em\");\n    i0.ɵɵtext(1, \"Es requerido\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_em_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"em\");\n    i0.ɵɵtext(1, \"Es requerido\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class RegisterComponent {\n  constructor(authService) {\n    this.authService = authService;\n    this.validateControl = controlName => {\n      return this.registerForm.get(controlName).invalid && this.registerForm.get(controlName).touched;\n    };\n    this.hasError = (controlName, errorName) => {\n      return this.registerForm.get(controlName).hasError(errorName);\n    };\n    this.registerUser = registerFormValue => {\n      const formValues = {\n        ...registerFormValue\n      };\n      const user = {\n        Name: formValues.Name,\n        email: formValues.email,\n        password: formValues.password\n      };\n      this.authService.registerUser(\"api/accounts/registration\", user).subscribe({\n        next: _ => console.log(\"Successful registration\"),\n        error: err => console.log(err.error.errors)\n      });\n    };\n  }\n  ngOnInit() {\n    this.registerForm = new FormGroup({\n      Name: new FormControl(''),\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', [Validators.required])\n    });\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.AuthenticationService));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 30,\n  vars: 5,\n  consts: [[1, \"card\"], [1, \"card-body\"], [1, \"card-title\"], [\"autocomplete\", \"off\", \"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\", \"row\"], [\"for\", \"name\", 1, \"col-form-label\", \"col-sm-2\"], [1, \"col-md-5\"], [\"type\", \"text\", \"id\", \"name\", \"formControlName\", \"name\", 1, \"form-control\"], [\"for\", \"email\", 1, \"col-form-label\", \"col-sm-2\"], [\"type\", \"email\", \"id\", \"email\", \"formControlName\", \"email\", 1, \"form-control\"], [4, \"ngIf\"], [\"for\", \"password\", 1, \"col-form-label\", \"col-sm-2\"], [\"type\", \"password\", \"id\", \"password\", \"formControlName\", \"password\", 1, \"form-control\"], [1, \"col-md-1\"], [\"type\", \"submit\", 1, \"btn\", \"btn-info\", 3, \"disabled\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\", 2);\n      i0.ɵɵtext(3, \"Register\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"form\", 3);\n      i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.registerUser(ctx.registerForm.value);\n      });\n      i0.ɵɵelementStart(5, \"div\", 4)(6, \"label\", 5);\n      i0.ɵɵtext(7, \"Nombre:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 6);\n      i0.ɵɵelement(9, \"input\", 7);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"div\", 4)(11, \"label\", 8);\n      i0.ɵɵtext(12, \"Correo:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\", 6);\n      i0.ɵɵelement(14, \"input\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 6);\n      i0.ɵɵtemplate(16, RegisterComponent_em_16_Template, 2, 0, \"em\", 10);\n      i0.ɵɵtemplate(17, RegisterComponent_em_17_Template, 2, 0, \"em\", 10);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(18, \"div\", 4)(19, \"label\", 11);\n      i0.ɵɵtext(20, \"Contrase\\u00F1a:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"div\", 6);\n      i0.ɵɵelement(22, \"input\", 12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"div\", 6);\n      i0.ɵɵtemplate(24, RegisterComponent_em_24_Template, 2, 0, \"em\", 10);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(25, \"br\");\n      i0.ɵɵelementStart(26, \"div\", 4)(27, \"div\", 13)(28, \"button\", 14);\n      i0.ɵɵtext(29, \"Registrar\");\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n      i0.ɵɵadvance(12);\n      i0.ɵɵproperty(\"ngIf\", ctx.validateControl(\"email\") && ctx.hasError(\"email\", \"email\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.validateControl(\"email\") && ctx.hasError(\"email\", \"required\"));\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.validateControl(\"password\") && ctx.hasError(\"password\", \"required\"));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"disabled\", !ctx.registerForm.valid);\n    }\n  },\n  dependencies: [i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AACA,SAASA,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;;;;;;;ICezDC,0BAAmE;IAAAA,uCAAuB;IAAAA,iBAAK;;;;;IAC/FA,0BAAsE;IAAAA,4BAAY;IAAAA,iBAAK;;;;;IASvFA,0BAA4E;IAAAA,4BAAY;IAAAA,iBAAK;;;ADjBvG,OAAM,MAAOC,iBAAiB;EAE5BC,YAAoBC,WAAkC;IAAlC,gBAAW,GAAXA,WAAW;IAQxB,oBAAe,GAAIC,WAAmB,IAAI;MAC/C,OAAO,IAAI,CAACC,YAAY,CAACC,GAAG,CAACF,WAAW,CAAC,CAACG,OAAO,IAAI,IAAI,CAACF,YAAY,CAACC,GAAG,CAACF,WAAW,CAAC,CAACI,OAAO;IACjG,CAAC;IACM,aAAQ,GAAG,CAACJ,WAAmB,EAAEK,SAAiB,KAAI;MAC3D,OAAO,IAAI,CAACJ,YAAY,CAACC,GAAG,CAACF,WAAW,CAAC,CAACM,QAAQ,CAACD,SAAS,CAAC;IAC/D,CAAC;IACM,iBAAY,GAAIE,iBAAiB,IAAI;MAC1C,MAAMC,UAAU,GAAG;QAAE,GAAGD;MAAiB,CAAE;MAC3C,MAAME,IAAI,GAAoB;QAC5BC,IAAI,EAAEF,UAAU,CAACE,IAAI;QACrBC,KAAK,EAAEH,UAAU,CAACG,KAAK;QACvBC,QAAQ,EAAEJ,UAAU,CAACI;OACtB;MACD,IAAI,CAACb,WAAW,CAACc,YAAY,CAAC,2BAA2B,EAAEJ,IAAI,CAAC,CAC7DK,SAAS,CAAC;QACTC,IAAI,EAAGC,CAAC,IAAKC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;QACnDC,KAAK,EAAGC,GAAsB,IAAKH,OAAO,CAACC,GAAG,CAACE,GAAG,CAACD,KAAK,CAACE,MAAM;OAChE,CAAC;IACN,CAAC;EA1ByD;EAC1DC,QAAQ;IACN,IAAI,CAACrB,YAAY,GAAG,IAAIP,SAAS,CAAC;MAChCgB,IAAI,EAAE,IAAIjB,WAAW,CAAC,EAAE,CAAC;MACzBkB,KAAK,EAAE,IAAIlB,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAAC4B,QAAQ,EAAE5B,UAAU,CAACgB,KAAK,CAAC,CAAC;MACnEC,QAAQ,EAAE,IAAInB,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAAC4B,QAAQ,CAAC;KACpD,CAAC;EACJ;;AATW1B,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAA2B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCT9BhC,8BAAkB;MAESA,wBAAQ;MAAAA,iBAAK;MACpCA,+BAA6G;MAA9CA;QAAA,OAAYiC,wCAAgC;MAAA,EAAC;MAC1GjC,8BAAsB;MAC8BA,uBAAO;MAAAA,iBAAQ;MACjEA,8BAAsB;MACpBA,2BAA2E;MAC7EA,iBAAM;MAERA,+BAAsB;MAC+BA,wBAAO;MAAAA,iBAAQ;MAClEA,+BAAsB;MACpBA,4BAA8E;MAChFA,iBAAM;MACNA,+BAAsB;MACpBA,mEAA+F;MAC/FA,mEAAuF;MACzFA,iBAAM;MAERA,+BAAsB;MACkCA,iCAAW;MAAAA,iBAAQ;MACzEA,+BAAsB;MACpBA,6BAAuF;MACzFA,iBAAM;MACNA,+BAAsB;MACpBA,mEAA6F;MAC/FA,iBAAM;MAERA,sBAAI;MACJA,+BAAsB;MAE0DA,0BAAS;MAAAA,iBAAS;;;MA7B9FA,eAA0B;MAA1BA,4CAA0B;MAarBA,gBAA4D;MAA5DA,qFAA4D;MAC5DA,eAA+D;MAA/DA,wFAA+D;MAS/DA,eAAqE;MAArEA,8FAAqE;MAM/BA,eAAgC;MAAhCA,kDAAgC","names":["FormControl","FormGroup","Validators","i0","RegisterComponent","constructor","authService","controlName","registerForm","get","invalid","touched","errorName","hasError","registerFormValue","formValues","user","Name","email","password","registerUser","subscribe","next","_","console","log","error","err","errors","ngOnInit","required","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Guillermo\\source\\repos\\PruebaTecnica_Operati\\PruebaTecnica_Operati\\ClientApp\\src\\app\\register\\register.component.ts","C:\\Users\\Guillermo\\source\\repos\\PruebaTecnica_Operati\\PruebaTecnica_Operati\\ClientApp\\src\\app\\register\\register.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { RegistrationDto } from '../../interfaces/registrationDto';\r\nimport { AuthenticationService } from './../shared/services/authentication.service';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  registerForm: FormGroup;\r\n  constructor(private authService: AuthenticationService) { }\r\n  ngOnInit(): void {\r\n    this.registerForm = new FormGroup({\r\n      Name: new FormControl(''),\r\n      email: new FormControl('', [Validators.required, Validators.email]),\r\n      password: new FormControl('', [Validators.required]),\r\n    });\r\n  }\r\n  public validateControl = (controlName: string) => {\r\n    return this.registerForm.get(controlName).invalid && this.registerForm.get(controlName).touched\r\n  }\r\n  public hasError = (controlName: string, errorName: string) => {\r\n    return this.registerForm.get(controlName).hasError(errorName)\r\n  }\r\n  public registerUser = (registerFormValue) => {\r\n    const formValues = { ...registerFormValue };\r\n    const user: RegistrationDto = {\r\n      Name: formValues.Name,\r\n      email: formValues.email,\r\n      password: formValues.password,\r\n    };\r\n    this.authService.registerUser(\"api/accounts/registration\", user)\r\n      .subscribe({\r\n        next: (_) => console.log(\"Successful registration\"),\r\n        error: (err: HttpErrorResponse) => console.log(err.error.errors)\r\n      })\r\n  }\r\n}\r\n","<div class=\"card\">\r\n  <div class=\"card-body\">\r\n    <h1 class=\"card-title\">Register</h1>\r\n    <form [formGroup]=\"registerForm\" autocomplete=\"off\" novalidate (ngSubmit)=\"registerUser(registerForm.value)\">\r\n      <div class=\"mb-3 row\">\r\n        <label for=\"name\" class=\"col-form-label col-sm-2\">Nombre:</label>\r\n        <div class=\"col-md-5\">\r\n          <input type=\"text\" id=\"name\" formControlName=\"name\" class=\"form-control\" />\r\n        </div>\r\n      </div>\r\n      <div class=\"mb-3 row\">\r\n        <label for=\"email\" class=\"col-form-label col-sm-2\">Correo:</label>\r\n        <div class=\"col-md-5\">\r\n          <input type=\"email\" id=\"email\" formControlName=\"email\" class=\"form-control\" />\r\n        </div>\r\n        <div class=\"col-md-5\">\r\n          <em *ngIf=\"validateControl('email') && hasError('email', 'email')\">Coloar un correo valido</em>\r\n          <em *ngIf=\"validateControl('email') && hasError('email', 'required')\">Es requerido</em>\r\n        </div>\r\n      </div>\r\n      <div class=\"mb-3 row\">\r\n        <label for=\"password\" class=\"col-form-label col-sm-2\">Contraseña:</label>\r\n        <div class=\"col-md-5\">\r\n          <input type=\"password\" id=\"password\" formControlName=\"password\" class=\"form-control\" />\r\n        </div>\r\n        <div class=\"col-md-5\">\r\n          <em *ngIf=\"validateControl('password') && hasError('password', 'required')\">Es requerido</em>\r\n        </div>\r\n      </div>\r\n      <br>\r\n      <div class=\"mb-3 row\">\r\n        <div class=\"col-md-1\">\r\n          <button type=\"submit\" class=\"btn btn-info\" [disabled]=\"!registerForm.valid\">Registrar</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}